// Code generated by protoc-gen-go. DO NOT EDIT.
// source: page.proto

package cloudwalker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RowLayout int32

const (
	RowLayout_Landscape RowLayout = 0
	RowLayout_Portrait  RowLayout = 1
	RowLayout_Square    RowLayout = 2
	RowLayout_Circle    RowLayout = 3
)

var RowLayout_name = map[int32]string{
	0: "Landscape",
	1: "Portrait",
	2: "Square",
	3: "Circle",
}

var RowLayout_value = map[string]int32{
	"Landscape": 0,
	"Portrait":  1,
	"Square":    2,
	"Circle":    3,
}

func (x RowLayout) String() string {
	return proto.EnumName(RowLayout_name, int32(x))
}

func (RowLayout) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{0}
}

type RowType int32

const (
	RowType_Editorial         RowType = 0
	RowType_Recommendation_CB RowType = 1
	RowType_Dynamic           RowType = 2
	RowType_Recommendation_CF RowType = 3
	RowType_Web               RowType = 4
)

var RowType_name = map[int32]string{
	0: "Editorial",
	1: "Recommendation_CB",
	2: "Dynamic",
	3: "Recommendation_CF",
	4: "Web",
}

var RowType_value = map[string]int32{
	"Editorial":         0,
	"Recommendation_CB": 1,
	"Dynamic":           2,
	"Recommendation_CF": 3,
	"Web":               4,
}

func (x RowType) String() string {
	return proto.EnumName(RowType_name, int32(x))
}

func (RowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{1}
}

type Monetize int32

const (
	Monetize_Free         Monetize = 0
	Monetize_Paid         Monetize = 1
	Monetize_Subscription Monetize = 2
	Monetize_Rent         Monetize = 3
)

var Monetize_name = map[int32]string{
	0: "Free",
	1: "Paid",
	2: "Subscription",
	3: "Rent",
}

var Monetize_value = map[string]int32{
	"Free":         0,
	"Paid":         1,
	"Subscription": 2,
	"Rent":         3,
}

func (x Monetize) String() string {
	return proto.EnumName(Monetize_name, int32(x))
}

func (Monetize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{2}
}

type TileType int32

const (
	TileType_ImageTile     TileType = 0
	TileType_VideoTile     TileType = 1
	TileType_FeatureTile   TileType = 2
	TileType_AdvertiseTile TileType = 3
	TileType_CarouselTile  TileType = 4
)

var TileType_name = map[int32]string{
	0: "ImageTile",
	1: "VideoTile",
	2: "FeatureTile",
	3: "AdvertiseTile",
	4: "CarouselTile",
}

var TileType_value = map[string]int32{
	"ImageTile":     0,
	"VideoTile":     1,
	"FeatureTile":   2,
	"AdvertiseTile": 3,
	"CarouselTile":  4,
}

func (x TileType) String() string {
	return proto.EnumName(TileType_name, int32(x))
}

func (TileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{3}
}

type Page struct {
	PageName             string               `protobuf:"bytes,1,opt,name=page_name,json=pageName,proto3" json:"page_name,omitempty"`
	PageLogo             string               `protobuf:"bytes,3,opt,name=page_logo,json=pageLogo,proto3" json:"page_logo,omitempty"`
	Row                  []*Row               `protobuf:"bytes,4,rep,name=row,proto3" json:"row,omitempty"`
	Carousel             []*Carousel          `protobuf:"bytes,5,rep,name=carousel,proto3" json:"carousel,omitempty"`
	PageId               string               `protobuf:"bytes,6,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" bson:"-"`
	XXX_unrecognized     []byte               `json:"-" bson:"-"`
	XXX_sizecache        int32                `json:"-" bson:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{0}
}

func (m *Page) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Page.Unmarshal(m, b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Page.Marshal(b, m, deterministic)
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return xxx_messageInfo_Page.Size(m)
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetPageName() string {
	if m != nil {
		return m.PageName
	}
	return ""
}

func (m *Page) GetPageLogo() string {
	if m != nil {
		return m.PageLogo
	}
	return ""
}

func (m *Page) GetRow() []*Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Page) GetCarousel() []*Carousel {
	if m != nil {
		return m.Carousel
	}
	return nil
}

func (m *Page) GetPageId() string {
	if m != nil {
		return m.PageId
	}
	return ""
}

func (m *Page) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Page) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Carousel struct {
	Target               string   `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Package              string   `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	ImageUrl             string   `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Index                int32    `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Carousel) Reset()         { *m = Carousel{} }
func (m *Carousel) String() string { return proto.CompactTextString(m) }
func (*Carousel) ProtoMessage()    {}
func (*Carousel) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{1}
}

func (m *Carousel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Carousel.Unmarshal(m, b)
}
func (m *Carousel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Carousel.Marshal(b, m, deterministic)
}
func (m *Carousel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Carousel.Merge(m, src)
}
func (m *Carousel) XXX_Size() int {
	return xxx_messageInfo_Carousel.Size(m)
}
func (m *Carousel) XXX_DiscardUnknown() {
	xxx_messageInfo_Carousel.DiscardUnknown(m)
}

var xxx_messageInfo_Carousel proto.InternalMessageInfo

func (m *Carousel) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Carousel) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *Carousel) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Carousel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Carousel) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Row struct {
	RowLayout            RowLayout                  `protobuf:"varint,1,opt,name=row_layout,json=rowLayout,proto3,enum=cloudwalker.RowLayout" json:"row_layout,omitempty"`
	RowName              string                     `protobuf:"bytes,2,opt,name=row_name,json=rowName,proto3" json:"row_name,omitempty"`
	RowIndex             int32                      `protobuf:"varint,3,opt,name=row_index,json=rowIndex,proto3" json:"row_index,omitempty"`
	RowFilters           map[string]*RowFilterValue `protobuf:"bytes,4,rep,name=row_filters,json=rowFilters,proto3" json:"row_filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RowSort              map[string]int32           `protobuf:"bytes,5,rep,name=row_sort,json=rowSort,proto3" json:"row_sort,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	RowTileIds           []string                   `protobuf:"bytes,6,rep,name=row_tile_ids,json=rowTileIds,proto3" json:"row_tile_ids,omitempty"`
	RowType              RowType                    `protobuf:"varint,7,opt,name=row_type,json=rowType,proto3,enum=cloudwalker.RowType" json:"row_type,omitempty"`
	Shuffle              bool                       `protobuf:"varint,8,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-" bson:"-"`
	XXX_unrecognized     []byte                     `json:"-" bson:"-"`
	XXX_sizecache        int32                      `json:"-" bson:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{2}
}

func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetRowLayout() RowLayout {
	if m != nil {
		return m.RowLayout
	}
	return RowLayout_Landscape
}

func (m *Row) GetRowName() string {
	if m != nil {
		return m.RowName
	}
	return ""
}

func (m *Row) GetRowIndex() int32 {
	if m != nil {
		return m.RowIndex
	}
	return 0
}

func (m *Row) GetRowFilters() map[string]*RowFilterValue {
	if m != nil {
		return m.RowFilters
	}
	return nil
}

func (m *Row) GetRowSort() map[string]int32 {
	if m != nil {
		return m.RowSort
	}
	return nil
}

func (m *Row) GetRowTileIds() []string {
	if m != nil {
		return m.RowTileIds
	}
	return nil
}

func (m *Row) GetRowType() RowType {
	if m != nil {
		return m.RowType
	}
	return RowType_Editorial
}

func (m *Row) GetShuffle() bool {
	if m != nil {
		return m.Shuffle
	}
	return false
}

type RowFilterValue struct {
	Values               []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RowFilterValue) Reset()         { *m = RowFilterValue{} }
func (m *RowFilterValue) String() string { return proto.CompactTextString(m) }
func (*RowFilterValue) ProtoMessage()    {}
func (*RowFilterValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{3}
}

func (m *RowFilterValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowFilterValue.Unmarshal(m, b)
}
func (m *RowFilterValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowFilterValue.Marshal(b, m, deterministic)
}
func (m *RowFilterValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowFilterValue.Merge(m, src)
}
func (m *RowFilterValue) XXX_Size() int {
	return xxx_messageInfo_RowFilterValue.Size(m)
}
func (m *RowFilterValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RowFilterValue.DiscardUnknown(m)
}

var xxx_messageInfo_RowFilterValue proto.InternalMessageInfo

func (m *RowFilterValue) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// get Page input
type GetPageReq struct {
	PageId               string   `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetPageReq) Reset()         { *m = GetPageReq{} }
func (m *GetPageReq) String() string { return proto.CompactTextString(m) }
func (*GetPageReq) ProtoMessage()    {}
func (*GetPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{4}
}

func (m *GetPageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPageReq.Unmarshal(m, b)
}
func (m *GetPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPageReq.Marshal(b, m, deterministic)
}
func (m *GetPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPageReq.Merge(m, src)
}
func (m *GetPageReq) XXX_Size() int {
	return xxx_messageInfo_GetPageReq.Size(m)
}
func (m *GetPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPageReq proto.InternalMessageInfo

func (m *GetPageReq) GetPageId() string {
	if m != nil {
		return m.PageId
	}
	return ""
}

// update Page req
type UpdatePageReq struct {
	PageId               string   `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Page                 *Page    `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UpdatePageReq) Reset()         { *m = UpdatePageReq{} }
func (m *UpdatePageReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePageReq) ProtoMessage()    {}
func (*UpdatePageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{5}
}

func (m *UpdatePageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePageReq.Unmarshal(m, b)
}
func (m *UpdatePageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePageReq.Marshal(b, m, deterministic)
}
func (m *UpdatePageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePageReq.Merge(m, src)
}
func (m *UpdatePageReq) XXX_Size() int {
	return xxx_messageInfo_UpdatePageReq.Size(m)
}
func (m *UpdatePageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePageReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePageReq proto.InternalMessageInfo

func (m *UpdatePageReq) GetPageId() string {
	if m != nil {
		return m.PageId
	}
	return ""
}

func (m *UpdatePageReq) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type DeletePageReq struct {
	PageId               string   `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DeletePageReq) Reset()         { *m = DeletePageReq{} }
func (m *DeletePageReq) String() string { return proto.CompactTextString(m) }
func (*DeletePageReq) ProtoMessage()    {}
func (*DeletePageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{6}
}

func (m *DeletePageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePageReq.Unmarshal(m, b)
}
func (m *DeletePageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePageReq.Marshal(b, m, deterministic)
}
func (m *DeletePageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePageReq.Merge(m, src)
}
func (m *DeletePageReq) XXX_Size() int {
	return xxx_messageInfo_DeletePageReq.Size(m)
}
func (m *DeletePageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePageReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePageReq proto.InternalMessageInfo

func (m *DeletePageReq) GetPageId() string {
	if m != nil {
		return m.PageId
	}
	return ""
}

type ResultPage struct {
	PageId               string       `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	PageName             string       `protobuf:"bytes,2,opt,name=page_name,json=pageName,proto3" json:"page_name,omitempty"`
	Carousels            []*Carousel  `protobuf:"bytes,3,rep,name=carousels,proto3" json:"carousels,omitempty"`
	Rows                 []*ResultRow `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *ResultPage) Reset()         { *m = ResultPage{} }
func (m *ResultPage) String() string { return proto.CompactTextString(m) }
func (*ResultPage) ProtoMessage()    {}
func (*ResultPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{7}
}

func (m *ResultPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultPage.Unmarshal(m, b)
}
func (m *ResultPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultPage.Marshal(b, m, deterministic)
}
func (m *ResultPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultPage.Merge(m, src)
}
func (m *ResultPage) XXX_Size() int {
	return xxx_messageInfo_ResultPage.Size(m)
}
func (m *ResultPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultPage.DiscardUnknown(m)
}

var xxx_messageInfo_ResultPage proto.InternalMessageInfo

func (m *ResultPage) GetPageId() string {
	if m != nil {
		return m.PageId
	}
	return ""
}

func (m *ResultPage) GetPageName() string {
	if m != nil {
		return m.PageName
	}
	return ""
}

func (m *ResultPage) GetCarousels() []*Carousel {
	if m != nil {
		return m.Carousels
	}
	return nil
}

func (m *ResultPage) GetRows() []*ResultRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

type ResultRow struct {
	RowName              string     `protobuf:"bytes,1,opt,name=row_name,json=rowName,proto3" json:"row_name,omitempty"`
	RowIndex             int32      `protobuf:"varint,2,opt,name=row_index,json=rowIndex,proto3" json:"row_index,omitempty"`
	Tiles                []*Content `protobuf:"bytes,3,rep,name=tiles,proto3" json:"tiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *ResultRow) Reset()         { *m = ResultRow{} }
func (m *ResultRow) String() string { return proto.CompactTextString(m) }
func (*ResultRow) ProtoMessage()    {}
func (*ResultRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{8}
}

func (m *ResultRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultRow.Unmarshal(m, b)
}
func (m *ResultRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultRow.Marshal(b, m, deterministic)
}
func (m *ResultRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultRow.Merge(m, src)
}
func (m *ResultRow) XXX_Size() int {
	return xxx_messageInfo_ResultRow.Size(m)
}
func (m *ResultRow) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultRow.DiscardUnknown(m)
}

var xxx_messageInfo_ResultRow proto.InternalMessageInfo

func (m *ResultRow) GetRowName() string {
	if m != nil {
		return m.RowName
	}
	return ""
}

func (m *ResultRow) GetRowIndex() int32 {
	if m != nil {
		return m.RowIndex
	}
	return 0
}

func (m *ResultRow) GetTiles() []*Content {
	if m != nil {
		return m.Tiles
	}
	return nil
}

// new schema
type Content struct {
	Title                string   `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Poster               []string `protobuf:"bytes,1,rep,name=poster,proto3" json:"poster,omitempty"`
	Portriat             []string `protobuf:"bytes,2,rep,name=portriat,proto3" json:"portriat,omitempty"`
	Type                 TileType `protobuf:"varint,3,opt,name=type,proto3,enum=cloudwalker.TileType" json:"type,omitempty"`
	IsDetailPage         bool     `protobuf:"varint,4,opt,name=is_detail_page,json=isDetailPage,proto3" json:"is_detail_page,omitempty"`
	ContentId            string   `protobuf:"bytes,5,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Play                 []*Play  `protobuf:"bytes,6,rep,name=play,proto3" json:"play,omitempty"`
	Video                []string `protobuf:"bytes,7,rep,name=video,proto3" json:"video,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{9}
}

func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Content) GetPoster() []string {
	if m != nil {
		return m.Poster
	}
	return nil
}

func (m *Content) GetPortriat() []string {
	if m != nil {
		return m.Portriat
	}
	return nil
}

func (m *Content) GetType() TileType {
	if m != nil {
		return m.Type
	}
	return TileType_ImageTile
}

func (m *Content) GetIsDetailPage() bool {
	if m != nil {
		return m.IsDetailPage
	}
	return false
}

func (m *Content) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *Content) GetPlay() []*Play {
	if m != nil {
		return m.Play
	}
	return nil
}

func (m *Content) GetVideo() []string {
	if m != nil {
		return m.Video
	}
	return nil
}

type Play struct {
	Monetize             Monetize `protobuf:"varint,5,opt,name=monetize,proto3,enum=cloudwalker.Monetize" json:"monetize,omitempty"`
	Target               string   `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Package              string   `protobuf:"bytes,3,opt,name=package,proto3" json:"package,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Play) Reset()         { *m = Play{} }
func (m *Play) String() string { return proto.CompactTextString(m) }
func (*Play) ProtoMessage()    {}
func (*Play) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{10}
}

func (m *Play) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Play.Unmarshal(m, b)
}
func (m *Play) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Play.Marshal(b, m, deterministic)
}
func (m *Play) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Play.Merge(m, src)
}
func (m *Play) XXX_Size() int {
	return xxx_messageInfo_Play.Size(m)
}
func (m *Play) XXX_DiscardUnknown() {
	xxx_messageInfo_Play.DiscardUnknown(m)
}

var xxx_messageInfo_Play proto.InternalMessageInfo

func (m *Play) GetMonetize() Monetize {
	if m != nil {
		return m.Monetize
	}
	return Monetize_Free
}

func (m *Play) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Play) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Play) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *Play) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type DropDownReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DropDownReq) Reset()         { *m = DropDownReq{} }
func (m *DropDownReq) String() string { return proto.CompactTextString(m) }
func (*DropDownReq) ProtoMessage()    {}
func (*DropDownReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{11}
}

func (m *DropDownReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DropDownReq.Unmarshal(m, b)
}
func (m *DropDownReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DropDownReq.Marshal(b, m, deterministic)
}
func (m *DropDownReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropDownReq.Merge(m, src)
}
func (m *DropDownReq) XXX_Size() int {
	return xxx_messageInfo_DropDownReq.Size(m)
}
func (m *DropDownReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DropDownReq.DiscardUnknown(m)
}

var xxx_messageInfo_DropDownReq proto.InternalMessageInfo

func (m *DropDownReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type DropDownResp struct {
	Result               []string `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DropDownResp) Reset()         { *m = DropDownResp{} }
func (m *DropDownResp) String() string { return proto.CompactTextString(m) }
func (*DropDownResp) ProtoMessage()    {}
func (*DropDownResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14a105a5ef2e917, []int{12}
}

func (m *DropDownResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DropDownResp.Unmarshal(m, b)
}
func (m *DropDownResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DropDownResp.Marshal(b, m, deterministic)
}
func (m *DropDownResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropDownResp.Merge(m, src)
}
func (m *DropDownResp) XXX_Size() int {
	return xxx_messageInfo_DropDownResp.Size(m)
}
func (m *DropDownResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DropDownResp.DiscardUnknown(m)
}

var xxx_messageInfo_DropDownResp proto.InternalMessageInfo

func (m *DropDownResp) GetResult() []string {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterEnum("cloudwalker.RowLayout", RowLayout_name, RowLayout_value)
	proto.RegisterEnum("cloudwalker.RowType", RowType_name, RowType_value)
	proto.RegisterEnum("cloudwalker.Monetize", Monetize_name, Monetize_value)
	proto.RegisterEnum("cloudwalker.TileType", TileType_name, TileType_value)
	proto.RegisterType((*Page)(nil), "cloudwalker.Page")
	proto.RegisterType((*Carousel)(nil), "cloudwalker.Carousel")
	proto.RegisterType((*Row)(nil), "cloudwalker.Row")
	proto.RegisterMapType((map[string]*RowFilterValue)(nil), "cloudwalker.Row.RowFiltersEntry")
	proto.RegisterMapType((map[string]int32)(nil), "cloudwalker.Row.RowSortEntry")
	proto.RegisterType((*RowFilterValue)(nil), "cloudwalker.RowFilterValue")
	proto.RegisterType((*GetPageReq)(nil), "cloudwalker.GetPageReq")
	proto.RegisterType((*UpdatePageReq)(nil), "cloudwalker.UpdatePageReq")
	proto.RegisterType((*DeletePageReq)(nil), "cloudwalker.DeletePageReq")
	proto.RegisterType((*ResultPage)(nil), "cloudwalker.ResultPage")
	proto.RegisterType((*ResultRow)(nil), "cloudwalker.ResultRow")
	proto.RegisterType((*Content)(nil), "cloudwalker.Content")
	proto.RegisterType((*Play)(nil), "cloudwalker.Play")
	proto.RegisterType((*DropDownReq)(nil), "cloudwalker.DropDownReq")
	proto.RegisterType((*DropDownResp)(nil), "cloudwalker.DropDownResp")
}

func init() {
	proto.RegisterFile("page.proto", fileDescriptor_f14a105a5ef2e917)
}

var fileDescriptor_f14a105a5ef2e917 = []byte{
	// 1854 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6f, 0x1b, 0xc7,
	0x11, 0xf7, 0xf1, 0x43, 0x24, 0x87, 0xb2, 0x43, 0x6f, 0x6d, 0xf9, 0x4c, 0xc5, 0xe1, 0xf6, 0xea,
	0xb4, 0xca, 0x55, 0x22, 0x29, 0xaa, 0x68, 0x1b, 0xa7, 0x4a, 0xab, 0x0f, 0x2b, 0x50, 0xa1, 0x26,
	0xee, 0x49, 0x8e, 0x83, 0xa6, 0xb1, 0x7a, 0xe2, 0xad, 0xce, 0x0b, 0x1d, 0x6f, 0x2f, 0x77, 0x4b,
	0x31, 0x6a, 0x10, 0xa0, 0xe8, 0x53, 0x9f, 0xfa, 0xd2, 0x87, 0xbe, 0x15, 0x05, 0x8a, 0x3e, 0xf7,
	0x1f, 0xe9, 0x43, 0x81, 0xfe, 0x01, 0x04, 0x88, 0xfe, 0x1b, 0xfd, 0xc0, 0xec, 0xde, 0xf1, 0x4b,
	0x94, 0xfb, 0x12, 0x01, 0x82, 0x6e, 0x77, 0x66, 0x7e, 0x3b, 0x3b, 0x33, 0xfb, 0x9b, 0x11, 0x40,
	0xe4, 0xfa, 0xac, 0x19, 0xc5, 0x42, 0x0a, 0x52, 0xed, 0x06, 0xa2, 0xef, 0x0d, 0xdc, 0xe0, 0x82,
	0xc5, 0xf5, 0x55, 0x5f, 0x08, 0x3f, 0x60, 0x2d, 0x25, 0x3a, 0xeb, 0x9f, 0xb7, 0x58, 0x2f, 0x92,
	0x57, 0x5a, 0xb3, 0xde, 0x98, 0x17, 0x4a, 0xde, 0x63, 0x89, 0x74, 0x7b, 0x51, 0xaa, 0xf0, 0x66,
	0xaa, 0xe0, 0x46, 0xbc, 0xe5, 0x86, 0xa1, 0x90, 0xae, 0xe4, 0x22, 0x4c, 0x52, 0xe9, 0xba, 0xfa,
	0xd3, 0xdd, 0xf0, 0x59, 0xb8, 0x91, 0x0c, 0x5c, 0xdf, 0x67, 0x71, 0x4b, 0x44, 0x4a, 0x63, 0x81,
	0xf6, 0xf7, 0x7d, 0x2e, 0x5f, 0xf5, 0xcf, 0x9a, 0x5d, 0xd1, 0x6b, 0xf5, 0x06, 0x5c, 0x5e, 0x88,
	0x41, 0xcb, 0x17, 0x1b, 0x4a, 0xb8, 0x71, 0xe9, 0x06, 0xdc, 0x73, 0xa5, 0x88, 0x93, 0xd6, 0xf8,
	0x53, 0xdb, 0x59, 0x7f, 0xcf, 0x41, 0xe1, 0x99, 0xeb, 0x33, 0xb2, 0x03, 0x15, 0xbc, 0xe5, 0x69,
	0xe8, 0xf6, 0x98, 0x69, 0x50, 0x63, 0xad, 0xb2, 0xfb, 0x78, 0x34, 0x6c, 0x50, 0x6a, 0xd8, 0x75,
	0x54, 0xa0, 0x1f, 0xba, 0x3d, 0x46, 0xbb, 0xea, 0x64, 0x7a, 0xc6, 0xa8, 0xbe, 0xe9, 0x27, 0x86,
	0x53, 0x46, 0x33, 0x14, 0x92, 0xd5, 0x14, 0x22, 0x10, 0xbe, 0x30, 0xf3, 0x08, 0xa1, 0x85, 0x47,
	0xc2, 0x17, 0xc4, 0x82, 0x7c, 0x2c, 0x06, 0x66, 0x81, 0xe6, 0xd7, 0xaa, 0x9d, 0x5a, 0x73, 0x2a,
	0x8a, 0x4d, 0x47, 0x0c, 0x1c, 0x14, 0x92, 0x4d, 0x28, 0x77, 0xdd, 0x58, 0xf4, 0x13, 0x16, 0x98,
	0x45, 0xa5, 0x78, 0x7f, 0x46, 0x71, 0x2f, 0x15, 0x3a, 0x63, 0x35, 0xf2, 0x00, 0x4a, 0xea, 0x4c,
	0xee, 0x99, 0x4b, 0xea, 0xc4, 0x25, 0x5c, 0x1e, 0x7a, 0xe4, 0x5d, 0x80, 0x6e, 0xcc, 0x5c, 0xc9,
	0xbc, 0x53, 0x57, 0x9a, 0x25, 0x6a, 0xac, 0x55, 0x3b, 0xf5, 0xa6, 0x8e, 0x78, 0x33, 0x4b, 0x49,
	0xf3, 0x24, 0x4b, 0x89, 0x53, 0x49, 0xb5, 0x77, 0x24, 0x9a, 0xf6, 0x23, 0x2f, 0x33, 0x2d, 0xff,
	0x7f, 0xd3, 0x54, 0x7b, 0x47, 0x5a, 0xff, 0xce, 0x41, 0x39, 0xf3, 0x92, 0xbc, 0x07, 0x4b, 0xd2,
	0x8d, 0x7d, 0x26, 0xd3, 0x78, 0x7e, 0x6b, 0x34, 0x6c, 0x34, 0xa8, 0x61, 0x3f, 0xdc, 0x67, 0x2c,
	0x0a, 0x78, 0x78, 0xb1, 0x28, 0x9c, 0xa9, 0x09, 0x79, 0x8a, 0x17, 0xeb, 0x5e, 0xb8, 0x3e, 0x33,
	0x73, 0xca, 0xfa, 0xbb, 0xa3, 0x61, 0xe3, 0x3b, 0xd4, 0xb0, 0xbf, 0xb9, 0x13, 0x45, 0xf4, 0x99,
	0x16, 0xdd, 0x98, 0x94, 0xcc, 0x16, 0xd3, 0xca, 0x7b, 0x18, 0xa0, 0x7e, 0x1c, 0xe8, 0x9c, 0x4c,
	0xd2, 0x7a, 0x88, 0x02, 0xfa, 0x3c, 0x0e, 0x16, 0xa6, 0x55, 0x99, 0x3d, 0x8f, 0x03, 0xf2, 0x63,
	0x28, 0x4a, 0x2e, 0x03, 0x66, 0x16, 0x94, 0xf9, 0x3b, 0xa3, 0x61, 0xe3, 0x6d, 0x6a, 0xd8, 0x8d,
	0xec, 0x9e, 0xf4, 0x04, 0xa5, 0x8b, 0x30, 0xb4, 0x1d, 0xe1, 0x50, 0xe4, 0xa1, 0xc7, 0xbe, 0x30,
	0x8b, 0xd4, 0x58, 0x2b, 0xee, 0x1e, 0x8f, 0x86, 0x8d, 0x8f, 0x00, 0x5e, 0x7e, 0xda, 0xde, 0xd8,
	0x6c, 0xb7, 0x3f, 0xb3, 0x1f, 0xd7, 0xfe, 0x9b, 0xfd, 0x18, 0xa6, 0x47, 0x0d, 0xbb, 0x33, 0x46,
	0x3e, 0x44, 0x33, 0xda, 0xeb, 0x27, 0x0a, 0xd7, 0xa5, 0x1e, 0xf7, 0xb9, 0xa4, 0x6e, 0xe8, 0xd1,
	0xf7, 0xb7, 0x69, 0x5b, 0x7d, 0xfc, 0x88, 0x6e, 0xb6, 0xdb, 0x4d, 0x47, 0x9f, 0x60, 0xfd, 0xad,
	0x04, 0x79, 0x47, 0x0c, 0xc8, 0xef, 0x0d, 0x80, 0x58, 0x0c, 0x4e, 0x03, 0xf7, 0x4a, 0xf4, 0x75,
	0xfc, 0xef, 0x74, 0x56, 0xe6, 0xab, 0xee, 0x48, 0x49, 0x77, 0x5f, 0x8c, 0x86, 0x8d, 0x63, 0x6a,
	0xd8, 0x47, 0x8e, 0x18, 0x50, 0xbd, 0x37, 0x3e, 0x33, 0x61, 0xb2, 0x49, 0x8f, 0xdc, 0xd0, 0x4b,
	0xba, 0x6e, 0xc4, 0xe8, 0x36, 0x6d, 0xaf, 0xd3, 0x67, 0x22, 0x96, 0xb1, 0xcb, 0x25, 0xdd, 0xa6,
	0x9b, 0xeb, 0xf4, 0xf8, 0xf3, 0xbe, 0x1b, 0xa3, 0xa4, 0xb3, 0x4e, 0xf7, 0x78, 0xdc, 0x0d, 0xf0,
	0x7b, 0xab, 0xf9, 0x3b, 0xc3, 0x70, 0x2a, 0x71, 0x76, 0x06, 0x79, 0x1f, 0xca, 0xe8, 0x8f, 0x7a,
	0x5d, 0xb9, 0xd9, 0x6a, 0xc0, 0x53, 0x6f, 0xcc, 0x63, 0x2c, 0x06, 0xea, 0x6d, 0xf5, 0x01, 0xc1,
	0x4e, 0x75, 0x1c, 0xf3, 0x2a, 0x8e, 0x9f, 0x8c, 0x86, 0x8d, 0x93, 0xd7, 0xc5, 0xf1, 0x07, 0x88,
	0x7c, 0x73, 0x08, 0x79, 0x48, 0xe5, 0x2b, 0x46, 0x63, 0x37, 0xf4, 0x19, 0x15, 0xe7, 0xb4, 0x4d,
	0x37, 0x30, 0x96, 0xb4, 0xe9, 0xa0, 0xab, 0xca, 0x8e, 0xec, 0x40, 0x15, 0x8f, 0x3d, 0xe7, 0x81,
	0x64, 0x71, 0x92, 0xbe, 0x5e, 0x3a, 0x1f, 0x47, 0xfc, 0x3d, 0xd0, 0x2a, 0x4f, 0x43, 0x19, 0x5f,
	0x39, 0x18, 0xfb, 0x74, 0x83, 0xfc, 0xd9, 0xd0, 0x57, 0x4f, 0x44, 0x2c, 0xd3, 0x57, 0xfd, 0x68,
	0x11, 0xc0, 0xb1, 0x88, 0xa5, 0xb2, 0xde, 0x3d, 0x1f, 0x0d, 0x1b, 0x67, 0x50, 0x79, 0xf9, 0xe9,
	0xc6, 0xe6, 0x46, 0x07, 0xef, 0xf5, 0x9f, 0xc9, 0xbd, 0x72, 0xd4, 0xb0, 0x0f, 0xf0, 0x5e, 0xa8,
	0x3e, 0x9b, 0xa5, 0x8d, 0x4d, 0x7a, 0x2e, 0x62, 0x8a, 0xe7, 0x50, 0x8f, 0x25, 0x5d, 0x16, 0x7a,
	0x3c, 0xf4, 0xd5, 0x55, 0xa7, 0x24, 0x6e, 0x26, 0x68, 0xaa, 0xe0, 0x22, 0x0c, 0xa1, 0xb0, 0x8c,
	0x1e, 0x4a, 0x1e, 0x20, 0x91, 0x24, 0xe6, 0x12, 0xcd, 0xaf, 0x55, 0xd4, 0x25, 0x4e, 0x78, 0xc0,
	0x0e, 0xbd, 0x84, 0xfc, 0x35, 0xbd, 0x84, 0xbc, 0x8a, 0x98, 0x22, 0x93, 0x3b, 0x9d, 0x7b, 0xf3,
	0x97, 0x38, 0xb9, 0x8a, 0xd8, 0xae, 0x1c, 0x0d, 0x1b, 0x91, 0x7d, 0x81, 0x1e, 0xe2, 0x7a, 0xd6,
	0xc3, 0xa7, 0x1e, 0x97, 0x22, 0xe6, 0x6e, 0x80, 0x75, 0x44, 0xd7, 0xa9, 0xc3, 0xba, 0xa2, 0xd7,
	0x63, 0xa1, 0xa7, 0xa8, 0xfc, 0x74, 0x6f, 0x97, 0xea, 0x92, 0xda, 0xbf, 0x0a, 0xdd, 0x1e, 0xef,
	0x52, 0x5d, 0x54, 0xf3, 0x5a, 0x07, 0xb8, 0xbf, 0xb5, 0x4e, 0x5f, 0xb0, 0x33, 0xba, 0x4d, 0xbf,
	0x87, 0x85, 0x86, 0x37, 0xc1, 0xe3, 0x88, 0x09, 0xa5, 0xe4, 0x55, 0xff, 0xfc, 0x3c, 0x60, 0x8a,
	0xb7, 0xca, 0x4e, 0xb6, 0xac, 0xff, 0x02, 0xde, 0x98, 0xcb, 0x12, 0xa9, 0x41, 0xfe, 0x82, 0x5d,
	0x69, 0x72, 0x72, 0xf0, 0x93, 0x6c, 0x42, 0xf1, 0xd2, 0x0d, 0xfa, 0xba, 0x44, 0xab, 0x9d, 0xd5,
	0xf9, 0x2b, 0x6a, 0xf3, 0x8f, 0x51, 0xc5, 0xd1, 0x9a, 0x4f, 0x72, 0x3f, 0x34, 0xea, 0x4f, 0x60,
	0x79, 0x3a, 0x81, 0x0b, 0x80, 0xef, 0x4d, 0x03, 0xdf, 0x9d, 0xb2, 0xb5, 0xd6, 0xe0, 0xce, 0x2c,
	0x30, 0x59, 0x81, 0x25, 0x25, 0x4e, 0x4c, 0x43, 0xe5, 0x21, 0x5d, 0x59, 0x87, 0x00, 0x1f, 0x30,
	0x89, 0xbd, 0xc8, 0x61, 0x9f, 0x93, 0xf7, 0x26, 0xc4, 0xaf, 0xd9, 0xd5, 0x1a, 0x0d, 0x1b, 0x6f,
	0x51, 0xc3, 0x36, 0x55, 0xb7, 0xe2, 0xde, 0x42, 0x72, 0xd5, 0xcd, 0xc1, 0xfa, 0x93, 0x01, 0xb7,
	0x9f, 0x2b, 0xd2, 0xfe, 0x3a, 0xe0, 0xc8, 0x33, 0x28, 0x44, 0x19, 0x51, 0x57, 0x3b, 0x77, 0x67,
	0xa2, 0x86, 0xe6, 0x13, 0xce, 0x54, 0x60, 0x52, 0x50, 0xdd, 0x31, 0x16, 0x61, 0x2a, 0x24, 0xeb,
	0x08, 0x6e, 0xef, 0xb3, 0x80, 0x7d, 0x3d, 0xfe, 0x59, 0x7f, 0x31, 0x00, 0x1c, 0x96, 0xf4, 0x03,
	0x15, 0xbd, 0xe9, 0x9e, 0x69, 0xcc, 0xf4, 0xcc, 0xd5, 0xe9, 0x19, 0x20, 0x37, 0x69, 0xe0, 0x8a,
	0x81, 0xb6, 0xa0, 0x92, 0x75, 0xdd, 0xc4, 0xcc, 0xbf, 0xae, 0x3b, 0x4f, 0xf4, 0x88, 0x0d, 0x85,
	0x58, 0x0c, 0x32, 0xe2, 0x98, 0x23, 0x60, 0xe5, 0x11, 0x36, 0x7f, 0xa5, 0x63, 0x09, 0xa8, 0x8c,
	0xb7, 0xc8, 0xc3, 0x29, 0xbe, 0xd4, 0x4e, 0x8e, 0xa9, 0x70, 0x75, 0x9a, 0x0a, 0xd1, 0xcb, 0xe2,
	0x14, 0x61, 0xd9, 0xd8, 0xac, 0x02, 0x96, 0x79, 0x38, 0xfb, 0x48, 0xf7, 0x44, 0x28, 0x59, 0x28,
	0x1d, 0xad, 0x62, 0xfd, 0x26, 0x07, 0xa5, 0x74, 0x0b, 0x0b, 0x54, 0x37, 0xb9, 0xb2, 0x3a, 0x2c,
	0xed, 0x5c, 0x2b, 0xb0, 0x14, 0x89, 0x44, 0xb2, 0x38, 0x2b, 0x45, 0xbd, 0x22, 0x75, 0x28, 0x47,
	0xd8, 0x04, 0xb8, 0x2b, 0xcd, 0x9c, 0x92, 0x8c, 0xd7, 0xe4, 0x1d, 0x28, 0x28, 0x96, 0xc8, 0x2b,
	0x96, 0x98, 0x0d, 0x11, 0xd2, 0x09, 0xbe, 0x53, 0x47, 0xa9, 0x90, 0xc7, 0x70, 0x87, 0x27, 0xa7,
	0x1e, 0x93, 0x2e, 0x0f, 0x4e, 0x55, 0x05, 0x15, 0xd4, 0xa3, 0x5d, 0xe6, 0xc9, 0xbe, 0xda, 0x54,
	0xe9, 0x7a, 0x04, 0xd0, 0xd5, 0x5e, 0x62, 0xc6, 0x8a, 0xca, 0xbf, 0x4a, 0xba, 0x73, 0xe8, 0x91,
	0xb7, 0xa1, 0x10, 0x05, 0xee, 0x95, 0x22, 0xad, 0x6b, 0xc5, 0x17, 0xb8, 0x57, 0x8e, 0x12, 0xab,
	0x17, 0xc8, 0x3d, 0x26, 0xcc, 0x92, 0xf2, 0x57, 0x2f, 0xac, 0x3f, 0x1a, 0x50, 0x40, 0x25, 0x1c,
	0xbd, 0x7a, 0x22, 0x64, 0x92, 0xff, 0x9a, 0xa9, 0x23, 0xe6, 0x3d, 0xff, 0x59, 0x2a, 0x74, 0xc6,
	0x6a, 0x18, 0x9c, 0xe9, 0xf1, 0x66, 0x3c, 0xb9, 0xac, 0xc0, 0x52, 0x22, 0xfa, 0x71, 0x37, 0x2b,
	0xa1, 0x74, 0x85, 0xdc, 0x94, 0x4d, 0x34, 0x7a, 0x38, 0x1c, 0x0f, 0x29, 0x24, 0x0d, 0x99, 0x1a,
	0x30, 0x74, 0x6c, 0xac, 0x33, 0xa8, 0xee, 0xc7, 0x22, 0xda, 0x17, 0x83, 0x10, 0xeb, 0xff, 0x18,
	0x8a, 0xe7, 0x9c, 0x05, 0x59, 0xf5, 0x6f, 0x8f, 0x86, 0x8d, 0x77, 0xa9, 0x61, 0x6f, 0xed, 0xef,
	0xd2, 0x73, 0x1e, 0x30, 0x4f, 0x13, 0x2d, 0xfb, 0x82, 0x27, 0x32, 0xc1, 0x07, 0xe6, 0x33, 0x49,
	0x93, 0xbe, 0xef, 0xb3, 0x44, 0x32, 0x8f, 0x6a, 0x06, 0xc1, 0x26, 0xc7, 0xa5, 0x1a, 0x4c, 0x14,
	0x96, 0xf5, 0x6d, 0x58, 0x9e, 0x9c, 0x91, 0x44, 0xe8, 0x79, 0xac, 0x2a, 0x30, 0x4b, 0xb7, 0x5e,
	0xd9, 0x3f, 0x81, 0xca, 0x78, 0x5a, 0x20, 0xb7, 0xa1, 0x32, 0x9e, 0x07, 0x6a, 0xb7, 0xc8, 0x32,
	0x94, 0xb3, 0x79, 0xa0, 0x66, 0x10, 0x80, 0x25, 0x3d, 0x0f, 0xd4, 0x72, 0xf8, 0xad, 0xe7, 0x81,
	0x5a, 0xde, 0xfe, 0x25, 0x94, 0xd2, 0x0e, 0x81, 0xf6, 0xe3, 0x3e, 0x50, 0xbb, 0x45, 0xee, 0xc3,
	0xdd, 0x6b, 0x6d, 0xa0, 0x66, 0x90, 0x2a, 0x94, 0xd2, 0x2e, 0x50, 0xcb, 0x2d, 0xd2, 0x39, 0xa8,
	0xe5, 0x49, 0x09, 0xf2, 0x2f, 0xd8, 0x59, 0xad, 0x60, 0x3f, 0x81, 0x72, 0x96, 0x1f, 0x52, 0x86,
	0xc2, 0x41, 0xcc, 0xd0, 0xb3, 0x32, 0x4e, 0xf6, 0xdc, 0xab, 0x19, 0xa4, 0x06, 0xcb, 0xc7, 0xfd,
	0xb3, 0xa4, 0x1b, 0x73, 0xf5, 0xff, 0x43, 0x2d, 0x87, 0x32, 0x87, 0x85, 0xb2, 0x96, 0xb7, 0x5f,
	0x42, 0x39, 0xab, 0x4a, 0x74, 0x4d, 0xcd, 0x84, 0xb8, 0x51, 0xbb, 0x85, 0xcb, 0x8f, 0xb1, 0x4a,
	0xd4, 0xd2, 0x20, 0x6f, 0x40, 0xf5, 0x80, 0xb9, 0xb2, 0x1f, 0x6b, 0x79, 0x8e, 0xdc, 0x85, 0xdb,
	0x3b, 0xde, 0x25, 0x8b, 0x25, 0x4f, 0xf4, 0x56, 0x1e, 0x4f, 0xca, 0x68, 0x40, 0xed, 0x14, 0x3a,
	0xff, 0x28, 0x42, 0x15, 0xcb, 0xf8, 0x98, 0xc5, 0x97, 0xbc, 0xcb, 0xc8, 0x4f, 0x01, 0xf6, 0xd4,
	0xa4, 0xad, 0x6a, 0xfb, 0x3a, 0x57, 0xd6, 0xaf, 0x6f, 0x59, 0x2b, 0xbf, 0xfd, 0xe7, 0xbf, 0xfe,
	0x90, 0xab, 0x59, 0xd5, 0x56, 0x77, 0x6c, 0xfa, 0xc4, 0xb0, 0xc9, 0xcf, 0xa1, 0x94, 0x76, 0x04,
	0xf2, 0x60, 0xc6, 0x6a, 0xd2, 0x27, 0x16, 0xc1, 0xd5, 0x15, 0xdc, 0x3d, 0x42, 0x5a, 0xbe, 0xd6,
	0x6b, 0x7d, 0x99, 0xf2, 0xe1, 0x57, 0xe4, 0x23, 0xa8, 0x7e, 0xc0, 0xe4, 0x4e, 0xa0, 0x9e, 0x5e,
	0x42, 0x56, 0xae, 0x8d, 0xfd, 0x4f, 0x91, 0x5c, 0x17, 0xa1, 0x7e, 0x43, 0xa1, 0xde, 0x26, 0x55,
	0x44, 0x4d, 0x01, 0xda, 0x06, 0xf9, 0x0c, 0x60, 0xd2, 0x69, 0x48, 0x7d, 0xc6, 0x6e, 0xa6, 0x05,
	0x2d, 0xc2, 0xa4, 0x0a, 0xb3, 0x5e, 0xbf, 0xdf, 0xea, 0x8f, 0x55, 0x27, 0xce, 0x62, 0x08, 0x4e,
	0x01, 0x26, 0x8d, 0x62, 0x0e, 0x7e, 0xa6, 0x83, 0xd4, 0x6f, 0xb8, 0x8a, 0xf5, 0x48, 0x9d, 0xf1,
	0xc0, 0xbe, 0xdf, 0xf2, 0xc6, 0xfa, 0x53, 0x01, 0x39, 0x85, 0xaa, 0xc3, 0x12, 0x11, 0x5c, 0xb2,
	0xd7, 0xc7, 0xf9, 0xc1, 0x02, 0x6e, 0x57, 0x77, 0x78, 0x4b, 0xe1, 0x9b, 0x64, 0xa5, 0x15, 0x4f,
	0x70, 0xa6, 0x0e, 0xf8, 0x10, 0x4a, 0x7b, 0xae, 0x74, 0x03, 0xe1, 0xdf, 0x18, 0xed, 0x1b, 0xb1,
	0x6b, 0x0a, 0x1b, 0x48, 0xb9, 0xd5, 0xd5, 0x10, 0x6d, 0x83, 0xfc, 0x4a, 0x65, 0x30, 0x7b, 0xd7,
	0xc4, 0x9c, 0x0d, 0xc9, 0x84, 0x52, 0xea, 0x0f, 0x6f, 0x90, 0x24, 0x91, 0xf5, 0xa6, 0xc2, 0x5d,
	0x21, 0xf7, 0x30, 0x97, 0x99, 0xa4, 0xf5, 0xa5, 0x62, 0x8d, 0xaf, 0xce, 0x96, 0x94, 0x7b, 0x5b,
	0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x31, 0x18, 0x55, 0x17, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PageServiceClient is the client API for PageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PageServiceClient interface {
	// Always create a new page. we will not check if the page already exist or not.
	CreatePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error)
	// will get the page from its page ID.
	GetPage(ctx context.Context, in *GetPageReq, opts ...grpc.CallOption) (*Page, error)
	// will get all the page from the DB to create a Catlog(Book).
	GetAllPages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PageService_GetAllPagesClient, error)
	//replace a particular page of the given ID
	UpdatePage(ctx context.Context, in *UpdatePageReq, opts ...grpc.CallOption) (*Page, error)
	// Delete a page of the given ID.
	DeletePage(ctx context.Context, in *DeletePageReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// Resolve the page to actual content to show in the UI.
	ResolvePage(ctx context.Context, in *GetPageReq, opts ...grpc.CallOption) (*ResultPage, error)
	// get All the resolved pages to form a catlog
	Catalog(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PageService_CatalogClient, error)
	// INTERNAL but can used as seperatly to get all the possible value of a filed in DB.
	GetDropDown(ctx context.Context, in *DropDownReq, opts ...grpc.CallOption) (*DropDownResp, error)
}

type pageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPageServiceClient(cc grpc.ClientConnInterface) PageServiceClient {
	return &pageServiceClient{cc}
}

func (c *pageServiceClient) CreatePage(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/cloudwalker.PageService/CreatePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) GetPage(ctx context.Context, in *GetPageReq, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/cloudwalker.PageService/GetPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) GetAllPages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PageService_GetAllPagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PageService_serviceDesc.Streams[0], "/cloudwalker.PageService/GetAllPages", opts...)
	if err != nil {
		return nil, err
	}
	x := &pageServiceGetAllPagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PageService_GetAllPagesClient interface {
	Recv() (*Page, error)
	grpc.ClientStream
}

type pageServiceGetAllPagesClient struct {
	grpc.ClientStream
}

func (x *pageServiceGetAllPagesClient) Recv() (*Page, error) {
	m := new(Page)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pageServiceClient) UpdatePage(ctx context.Context, in *UpdatePageReq, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/cloudwalker.PageService/UpdatePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) DeletePage(ctx context.Context, in *DeletePageReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cloudwalker.PageService/DeletePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) ResolvePage(ctx context.Context, in *GetPageReq, opts ...grpc.CallOption) (*ResultPage, error) {
	out := new(ResultPage)
	err := c.cc.Invoke(ctx, "/cloudwalker.PageService/ResolvePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageServiceClient) Catalog(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PageService_CatalogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PageService_serviceDesc.Streams[1], "/cloudwalker.PageService/Catalog", opts...)
	if err != nil {
		return nil, err
	}
	x := &pageServiceCatalogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PageService_CatalogClient interface {
	Recv() (*ResultPage, error)
	grpc.ClientStream
}

type pageServiceCatalogClient struct {
	grpc.ClientStream
}

func (x *pageServiceCatalogClient) Recv() (*ResultPage, error) {
	m := new(ResultPage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pageServiceClient) GetDropDown(ctx context.Context, in *DropDownReq, opts ...grpc.CallOption) (*DropDownResp, error) {
	out := new(DropDownResp)
	err := c.cc.Invoke(ctx, "/cloudwalker.PageService/GetDropDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageServiceServer is the server API for PageService service.
type PageServiceServer interface {
	// Always create a new page. we will not check if the page already exist or not.
	CreatePage(context.Context, *Page) (*Page, error)
	// will get the page from its page ID.
	GetPage(context.Context, *GetPageReq) (*Page, error)
	// will get all the page from the DB to create a Catlog(Book).
	GetAllPages(*empty.Empty, PageService_GetAllPagesServer) error
	//replace a particular page of the given ID
	UpdatePage(context.Context, *UpdatePageReq) (*Page, error)
	// Delete a page of the given ID.
	DeletePage(context.Context, *DeletePageReq) (*empty.Empty, error)
	// Resolve the page to actual content to show in the UI.
	ResolvePage(context.Context, *GetPageReq) (*ResultPage, error)
	// get All the resolved pages to form a catlog
	Catalog(*empty.Empty, PageService_CatalogServer) error
	// INTERNAL but can used as seperatly to get all the possible value of a filed in DB.
	GetDropDown(context.Context, *DropDownReq) (*DropDownResp, error)
}

// UnimplementedPageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPageServiceServer struct {
}

func (*UnimplementedPageServiceServer) CreatePage(ctx context.Context, req *Page) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (*UnimplementedPageServiceServer) GetPage(ctx context.Context, req *GetPageReq) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (*UnimplementedPageServiceServer) GetAllPages(req *empty.Empty, srv PageService_GetAllPagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPages not implemented")
}
func (*UnimplementedPageServiceServer) UpdatePage(ctx context.Context, req *UpdatePageReq) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePage not implemented")
}
func (*UnimplementedPageServiceServer) DeletePage(ctx context.Context, req *DeletePageReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (*UnimplementedPageServiceServer) ResolvePage(ctx context.Context, req *GetPageReq) (*ResultPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolvePage not implemented")
}
func (*UnimplementedPageServiceServer) Catalog(req *empty.Empty, srv PageService_CatalogServer) error {
	return status.Errorf(codes.Unimplemented, "method Catalog not implemented")
}
func (*UnimplementedPageServiceServer) GetDropDown(ctx context.Context, req *DropDownReq) (*DropDownResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDropDown not implemented")
}

func RegisterPageServiceServer(s *grpc.Server, srv PageServiceServer) {
	s.RegisterService(&_PageService_serviceDesc, srv)
}

func _PageService_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudwalker.PageService/CreatePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).CreatePage(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudwalker.PageService/GetPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).GetPage(ctx, req.(*GetPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_GetAllPages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PageServiceServer).GetAllPages(m, &pageServiceGetAllPagesServer{stream})
}

type PageService_GetAllPagesServer interface {
	Send(*Page) error
	grpc.ServerStream
}

type pageServiceGetAllPagesServer struct {
	grpc.ServerStream
}

func (x *pageServiceGetAllPagesServer) Send(m *Page) error {
	return x.ServerStream.SendMsg(m)
}

func _PageService_UpdatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).UpdatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudwalker.PageService/UpdatePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).UpdatePage(ctx, req.(*UpdatePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudwalker.PageService/DeletePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).DeletePage(ctx, req.(*DeletePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_ResolvePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).ResolvePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudwalker.PageService/ResolvePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).ResolvePage(ctx, req.(*GetPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageService_Catalog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PageServiceServer).Catalog(m, &pageServiceCatalogServer{stream})
}

type PageService_CatalogServer interface {
	Send(*ResultPage) error
	grpc.ServerStream
}

type pageServiceCatalogServer struct {
	grpc.ServerStream
}

func (x *pageServiceCatalogServer) Send(m *ResultPage) error {
	return x.ServerStream.SendMsg(m)
}

func _PageService_GetDropDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropDownReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServiceServer).GetDropDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudwalker.PageService/GetDropDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServiceServer).GetDropDown(ctx, req.(*DropDownReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudwalker.PageService",
	HandlerType: (*PageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePage",
			Handler:    _PageService_CreatePage_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _PageService_GetPage_Handler,
		},
		{
			MethodName: "UpdatePage",
			Handler:    _PageService_UpdatePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _PageService_DeletePage_Handler,
		},
		{
			MethodName: "ResolvePage",
			Handler:    _PageService_ResolvePage_Handler,
		},
		{
			MethodName: "GetDropDown",
			Handler:    _PageService_GetDropDown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllPages",
			Handler:       _PageService_GetAllPages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Catalog",
			Handler:       _PageService_Catalog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "page.proto",
}
